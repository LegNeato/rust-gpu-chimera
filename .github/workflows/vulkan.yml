name: Vulkan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  RUST_BACKTRACE: 1

jobs:
  moltenvk-wgpu:
    name: macOS MoltenVK (wgpu)
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install MoltenVK via Homebrew
        run: |
          brew install molten-vk
          
          # Find where Homebrew installed MoltenVK
          MOLTEN_VK_PATH="$(brew --prefix molten-vk)"
          echo "MoltenVK installed at: $MOLTEN_VK_PATH"
          
          # List what was installed
          echo "MoltenVK contents:"
          ls -la "$MOLTEN_VK_PATH/lib/MoltenVK/" || echo "No MoltenVK lib dir"
          
          # Create ICD file manually since Homebrew doesn't provide one
          mkdir -p "$HOME/.config/vulkan/icd.d"
          cat > "$HOME/.config/vulkan/icd.d/MoltenVK_icd.json" << EOF
          {
              "file_format_version" : "1.0.0",
              "ICD": {
                  "library_path": "$MOLTEN_VK_PATH/lib/MoltenVK/libMoltenVK.dylib",
                  "api_version" : "1.3.0"
              }
          }
          EOF
          
          # Set up environment variables
          echo "VK_ICD_FILENAMES=$HOME/.config/vulkan/icd.d/MoltenVK_icd.json" >> $GITHUB_ENV
          echo "DYLD_LIBRARY_PATH=$MOLTEN_VK_PATH/lib/MoltenVK:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
          
          # Disable validation layers
          echo "VK_INSTANCE_LAYERS=" >> $GITHUB_ENV
          
          # MoltenVK environment variables for better compatibility
          echo "MVK_CONFIG_USE_METAL_ARGUMENT_BUFFERS=0" >> $GITHUB_ENV
          echo "MVK_ALLOW_METAL_FENCES=0" >> $GITHUB_ENV
          echo "MVK_ALLOW_METAL_EVENTS=0" >> $GITHUB_ENV
          
          # Verify installation
          echo "Created ICD file:"
          cat "$HOME/.config/vulkan/icd.d/MoltenVK_icd.json"

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run the demo (wgpu)
        run: cargo run --release --features wgpu,vulkan

      - name: Run unit tests (wgpu)
        run: cargo test --release --features wgpu,vulkan

  moltenvk-ash:
    name: macOS MoltenVK (ash)
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install MoltenVK via Homebrew
        run: |
          brew install molten-vk
          
          # Find where Homebrew installed MoltenVK
          MOLTEN_VK_PATH="$(brew --prefix molten-vk)"
          echo "MoltenVK installed at: $MOLTEN_VK_PATH"
          
          # List what was installed
          echo "MoltenVK contents:"
          ls -la "$MOLTEN_VK_PATH/lib/MoltenVK/" || echo "No MoltenVK lib dir"
          
          # Create ICD file manually since Homebrew doesn't provide one
          mkdir -p "$HOME/.config/vulkan/icd.d"
          cat > "$HOME/.config/vulkan/icd.d/MoltenVK_icd.json" << EOF
          {
              "file_format_version" : "1.0.0",
              "ICD": {
                  "library_path": "$MOLTEN_VK_PATH/lib/MoltenVK/libMoltenVK.dylib",
                  "api_version" : "1.3.0"
              }
          }
          EOF
          
          # Set up environment variables
          echo "VK_ICD_FILENAMES=$HOME/.config/vulkan/icd.d/MoltenVK_icd.json" >> $GITHUB_ENV
          echo "DYLD_LIBRARY_PATH=$MOLTEN_VK_PATH/lib/MoltenVK:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
          
          # Disable validation layers
          echo "VK_INSTANCE_LAYERS=" >> $GITHUB_ENV
          
          # MoltenVK environment variables for better compatibility
          echo "MVK_CONFIG_USE_METAL_ARGUMENT_BUFFERS=0" >> $GITHUB_ENV
          echo "MVK_ALLOW_METAL_FENCES=0" >> $GITHUB_ENV
          echo "MVK_ALLOW_METAL_EVENTS=0" >> $GITHUB_ENV
          
          # Verify installation
          echo "Created ICD file:"
          cat "$HOME/.config/vulkan/icd.d/MoltenVK_icd.json"

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run the demo (ash)
        run: cargo run --release --features ash

      - name: Run unit tests (ash)
        run: cargo test --release --features ash

  windows-wgpu:
    name: Windows Vulkan (wgpu)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Vulkan SDK
        uses: jakoch/install-vulkan-sdk-action@v1
        with:
          cache: true
          stripdown: true

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run the demo (wgpu)
        run: cargo run --release --features wgpu,vulkan

      - name: Run unit tests (wgpu)
        run: cargo test --release --features wgpu,vulkan

  windows-ash:
    name: Windows Vulkan (ash)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Vulkan SDK
        uses: jakoch/install-vulkan-sdk-action@v1
        with:
          cache: true
          stripdown: true

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run the demo (ash)
        run: cargo run --release --features ash

      - name: Run unit tests (ash)
        run: cargo test --release --features ash